let l=!1;function f(t){return`${"./".replace(/\/+$/,"")}${t.startsWith("/")?"":"/"}${t}`}async function i(t){const n=await fetch(t);if(!n.ok)throw new Error(`Font fetch failed: ${t} (${n.status})`);const a=await n.blob();return await new Promise((e,r)=>{const o=new FileReader;o.onerror=()=>r(new Error(`FileReader failed for ${t}`)),o.onload=()=>e(String(o.result||"").replace(/^data:.*?;base64,/,"")),o.readAsDataURL(a)})}async function c(t){if(l)return;try{const a=typeof t.getFontList=="function"?t.getFontList():null;if(a&&a.NotoSans){l=!0;return}}catch{}const n=[["NotoSans-Regular.ttf","NotoSans-Regular.ttf","NotoSans","normal"],["NotoSans-Bold.ttf","NotoSans-Bold.ttf","NotoSans","bold"],["NotoSans-Italic.ttf","NotoSans-Italic.ttf","NotoSans","italic"],["NotoSans-BoldItalic.ttf","NotoSans-BoldItalic.ttf","NotoSans","bolditalic"],["NotoSansMono-Regular.ttf","NotoSansMono-Regular.ttf","NotoSansMono","normal"],["NotoSansMono-Bold.ttf","NotoSansMono-Bold.ttf","NotoSansMono","bold"]];for(const[a,s,e,r]of n)try{const o=await i(f(`/fonts/${a}`));t.addFileToVFS(s,o),t.addFont(s,e,r)}catch(o){console.warn(`[pdf2/fonts] Failed to load ${a}:`,(o==null?void 0:o.message)||o)}l=!0}export{c as registerPdfFonts};
